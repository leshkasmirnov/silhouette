package ru.rybinsk.silhouette.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.Iterator;

public class PaymentExample {
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table payment
     * @mbggenerated
     */
    protected String orderByClause;
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table payment
     * @mbggenerated
     */
    protected boolean distinct;
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table payment
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public PaymentExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table payment
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table payment
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("pyt.Id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("pyt.Id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("pyt.Id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("pyt.Id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("pyt.Id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("pyt.Id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("pyt.Id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("pyt.Id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("pyt.Id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("pyt.Id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("pyt.Id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("pyt.Id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdIsNull() {
            addCriterion("pyt.Subscription_Id is null");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdIsNotNull() {
            addCriterion("pyt.Subscription_Id is not null");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdEqualTo(Integer value) {
            addCriterion("pyt.Subscription_Id =", value, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdNotEqualTo(Integer value) {
            addCriterion("pyt.Subscription_Id <>", value, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdGreaterThan(Integer value) {
            addCriterion("pyt.Subscription_Id >", value, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("pyt.Subscription_Id >=", value, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdLessThan(Integer value) {
            addCriterion("pyt.Subscription_Id <", value, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdLessThanOrEqualTo(Integer value) {
            addCriterion("pyt.Subscription_Id <=", value, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdIn(List<Integer> values) {
            addCriterion("pyt.Subscription_Id in", values, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdNotIn(List<Integer> values) {
            addCriterion("pyt.Subscription_Id not in", values, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdBetween(Integer value1, Integer value2) {
            addCriterion("pyt.Subscription_Id between", value1, value2, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andSubscriptionIdNotBetween(Integer value1, Integer value2) {
            addCriterion("pyt.Subscription_Id not between", value1, value2, "subscriptionId");
            return (Criteria) this;
        }

        public Criteria andPaidIsNull() {
            addCriterion("pyt.Paid is null");
            return (Criteria) this;
        }

        public Criteria andPaidIsNotNull() {
            addCriterion("pyt.Paid is not null");
            return (Criteria) this;
        }

        public Criteria andPaidEqualTo(Boolean value) {
            addCriterion("pyt.Paid =", value, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidNotEqualTo(Boolean value) {
            addCriterion("pyt.Paid <>", value, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidGreaterThan(Boolean value) {
            addCriterion("pyt.Paid >", value, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidGreaterThanOrEqualTo(Boolean value) {
            addCriterion("pyt.Paid >=", value, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidLessThan(Boolean value) {
            addCriterion("pyt.Paid <", value, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidLessThanOrEqualTo(Boolean value) {
            addCriterion("pyt.Paid <=", value, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidIn(List<Boolean> values) {
            addCriterion("pyt.Paid in", values, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidNotIn(List<Boolean> values) {
            addCriterion("pyt.Paid not in", values, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidBetween(Boolean value1, Boolean value2) {
            addCriterion("pyt.Paid between", value1, value2, "paid");
            return (Criteria) this;
        }

        public Criteria andPaidNotBetween(Boolean value1, Boolean value2) {
            addCriterion("pyt.Paid not between", value1, value2, "paid");
            return (Criteria) this;
        }

        public Criteria andPaymentDateIsNull() {
            addCriterion("pyt.Payment_Date is null");
            return (Criteria) this;
        }

        public Criteria andPaymentDateIsNotNull() {
            addCriterion("pyt.Payment_Date is not null");
            return (Criteria) this;
        }

        public Criteria andPaymentDateEqualTo(Date value) {
            addCriterionForJDBCDate("pyt.Payment_Date =", value, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("pyt.Payment_Date <>", value, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateGreaterThan(Date value) {
            addCriterionForJDBCDate("pyt.Payment_Date >", value, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("pyt.Payment_Date >=", value, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateLessThan(Date value) {
            addCriterionForJDBCDate("pyt.Payment_Date <", value, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("pyt.Payment_Date <=", value, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateIn(List<Date> values) {
            addCriterionForJDBCDate("pyt.Payment_Date in", values, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("pyt.Payment_Date not in", values, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("pyt.Payment_Date between", value1, value2, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andPaymentDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("pyt.Payment_Date not between", value1, value2, "paymentDate");
            return (Criteria) this;
        }

        public Criteria andSumIsNull() {
            addCriterion("pyt.`Sum` is null");
            return (Criteria) this;
        }

        public Criteria andSumIsNotNull() {
            addCriterion("pyt.`Sum` is not null");
            return (Criteria) this;
        }

        public Criteria andSumEqualTo(String value) {
            addCriterion("pyt.`Sum` =", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumNotEqualTo(String value) {
            addCriterion("pyt.`Sum` <>", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumGreaterThan(String value) {
            addCriterion("pyt.`Sum` >", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumGreaterThanOrEqualTo(String value) {
            addCriterion("pyt.`Sum` >=", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumLessThan(String value) {
            addCriterion("pyt.`Sum` <", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumLessThanOrEqualTo(String value) {
            addCriterion("pyt.`Sum` <=", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumLike(String value) {
            addCriterion("pyt.`Sum` like", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumNotLike(String value) {
            addCriterion("pyt.`Sum` not like", value, "sum");
            return (Criteria) this;
        }

        public Criteria andSumIn(List<String> values) {
            addCriterion("pyt.`Sum` in", values, "sum");
            return (Criteria) this;
        }

        public Criteria andSumNotIn(List<String> values) {
            addCriterion("pyt.`Sum` not in", values, "sum");
            return (Criteria) this;
        }

        public Criteria andSumBetween(String value1, String value2) {
            addCriterion("pyt.`Sum` between", value1, value2, "sum");
            return (Criteria) this;
        }

        public Criteria andSumNotBetween(String value1, String value2) {
            addCriterion("pyt.`Sum` not between", value1, value2, "sum");
            return (Criteria) this;
        }

        public Criteria andSumLikeInsensitive(String value) {
            addCriterion("upper(pyt.`Sum`) like", value.toUpperCase(), "sum");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table payment
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;
        private Object value;
        private Object secondValue;
        private boolean noValue;
        private boolean singleValue;
        private boolean betweenValue;
        private boolean listValue;
        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table payment
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}